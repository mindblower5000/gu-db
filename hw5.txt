


2. Подумать, какие операции являются транзакционными, и написать несколько примеров с транзакционными запросами.
Транзакция проверяет, если бонус у сотрудника составляет менее 10000, то она изменяет значение бонуса на 10000.
BEGIN;
SET @a = (SELECT `id` FROM `salary` WHERE `bonus` < 10000);
SET @bon = 10000;
UPDATE `salary` SET `bonus`=@bon WHERE `id` = @a;
COMMIT;


3. Проанализировать несколько запросов с помощью EXPLAIN.

mysql> mysql> EXPLAIN SELECT COUNT(`dept`) FROM `shtat`;
+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | shtat | NULL       | index | NULL          | dep  | 5       | NULL |   16 |   100.00 | Using index |
+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0,00 sec)


mysql> EXPLAIN SELECT `name`, `lastname`, `salary` FROM `shtat` ORDER BY `salary` DESC LIMIT 1;
+----+-------------+-------+------------+-------+---------------+--------+---------+------+------+----------+---------------------+
| id | select_type | table | partitions | type  | possible_keys | key    | key_len | ref  | rows | filtered | Extra               |
+----+-------------+-------+------------+-------+---------------+--------+---------+------+------+----------+---------------------+
|  1 | SIMPLE      | shtat | NULL       | index | NULL          | salary | 5       | NULL |    1 |   100.00 | Backward index scan |
+----+-------------+-------+------------+-------+---------------+--------+---------+------+------+----------+---------------------+
1 row in set, 1 warning (0,00 sec)
